module Endpoints
  class <%= plural_class_name %> < Base
    namespace "<%= url_path %>" do
      before do
        content_type :json, charset: 'utf-8'
      end

      get do
        resources =
          paginator(<%= singular_class_name %>.count) do |paginator|
            resources = <%= singular_class_name %>.order(paginator[:sort_by])

            If paginator.will_paginate?
              next_resources = resources = resources.limit(paginator[:args][:max].to_i)

              resources = resources.where { uuid >= Sequel.cast(paginator[:first], :uuid) }
              paginator[:first] = resources.get(:uuid)
              paginator[:last] = resources.offset(paginator[:args][:max].to_i - 1).get(:uuid)

              next_resources = next_resources.where { uuid > Sequel.cast(paginator[:last], :uuid) }
              paginator[:next_first] = next_resources.get(:uuid)
              paginator[:next_last] = next_resources.offset(paginator[:args][:max].to_i - 1).get(:uuid)
            end

            resources
          end

        encode serialize(resources)
      end

      post do
        # warning: not safe
        <%= field_name %> = <%= singular_class_name %>.new(body_params)
        <%= field_name %>.save
        status 201
        encode serialize(<%= field_name %>)
      end

      get "/:id" do |id|
        <%= field_name %> = <%= singular_class_name %>.first(uuid: id) || halt(404)
        encode serialize(<%= field_name %>)
      end

      patch "/:id" do |id|
        <%= field_name %> = <%= singular_class_name %>.first(uuid: id) || halt(404)
        # warning: not safe
        #<%= field_name %>.update(body_params)
        encode serialize(<%= field_name %>)
      end

      delete "/:id" do |id|
        <%= field_name %> = <%= singular_class_name %>.first(uuid: id) || halt(404)
        <%= field_name %>.destroy
        encode serialize(<%= field_name %>)
      end

      private

      def serialize(data, structure = :default)
        Serializers::<%= singular_class_name %>.new(structure).serialize(data)
      end
    end
  end
end
